import { NgafrAuthenticationService } from './ngafr-authentication.service';
import { Directive, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef, EventEmitter, Output, Input } from '@angular/core';
import { NgafrAuthenticationComponent } from './ngafr-authentication.component';
export class NgafrAuthDirective {
    constructor(componentFactoryResolver, viewContainer, cdr, auth) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainer = viewContainer;
        this.cdr = cdr;
        this.auth = auth;
        this.hideDefaultLogOutButton = 'false';
        this.userLoggedInEvent = new EventEmitter();
        this.userEvent = new EventEmitter();
        this.auth.loggedIn.subscribe(isLoggedIn => this.userLoggedInEvent.emit({ isLoggedIn: isLoggedIn }));
        this.auth.user.subscribe(user => this.userEvent.emit({ user: user }));
    }
    ngAfterViewInit() {
        this.auth.hideLogOutButton(JSON.parse(this.hideDefaultLogOutButton));
    }
    ngOnInit() {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(NgafrAuthenticationComponent);
        const componentRef = componentFactory.create(this.viewContainer.injector);
        this.authTemplateComponent = componentRef.instance;
        this.viewContainer.createEmbeddedView(this.authTemplateComponent.ngafrAuthElement);
        this.cdr.markForCheck();
    }
    logout() {
        this.auth.logout();
    }
}
NgafrAuthDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngafrAuth]',
                exportAs: 'ngafrAuth'
            },] }
];
NgafrAuthDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef },
    { type: NgafrAuthenticationService }
];
NgafrAuthDirective.propDecorators = {
    ngafrAuth: [{ type: Input, args: ['ngafrAuth',] }],
    userLogOut: [{ type: Input, args: ['userLogOut',] }],
    hideDefaultLogOutButton: [{ type: Input, args: ['hideDefaultLogOutButton',] }],
    userLoggedInEvent: [{ type: Output, args: ['userLoggedInEvent',] }],
    userEvent: [{ type: Output, args: ['userEvent',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdhZnItYXV0aGVudGljYXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmdhZnItYXV0aGVudGljYXRpb24vc3JjL2xpYi9uZ2Fmci1hdXRoZW50aWNhdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUNILFNBQVMsRUFBRSx3QkFBd0IsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFDeEUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQzlCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBT2hGLE1BQU0sT0FBTyxrQkFBa0I7SUFRM0IsWUFDWSx3QkFBa0QsRUFDbEQsYUFBK0IsRUFDL0IsR0FBc0IsRUFDdEIsSUFBZ0M7UUFIaEMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFDdEIsU0FBSSxHQUFKLElBQUksQ0FBNEI7UUFUViw0QkFBdUIsR0FBWSxPQUFPLENBQUM7UUFDaEQsc0JBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFDeEUsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBU2hFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUxRSxDQUFDO0lBQ0QsZUFBZTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCxRQUFRO1FBQ0osTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUM3RyxNQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMscUJBQXFCLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUNuRCxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ25GLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELE1BQU07UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3ZCLENBQUM7OztZQXBDSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRSxXQUFXO2FBQ3hCOzs7WUFWYyx3QkFBd0I7WUFBRSxnQkFBZ0I7WUFBRSxpQkFBaUI7WUFGbkUsMEJBQTBCOzs7d0JBYzlCLEtBQUssU0FBQyxXQUFXO3lCQUNqQixLQUFLLFNBQUMsWUFBWTtzQ0FDbEIsS0FBSyxTQUFDLHlCQUF5QjtnQ0FDL0IsTUFBTSxTQUFDLG1CQUFtQjt3QkFDMUIsTUFBTSxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ2FmckF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vbmdhZnItYXV0aGVudGljYXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7XHJcbiAgICBEaXJlY3RpdmUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICBFdmVudEVtaXR0ZXIsIE91dHB1dCwgSW5wdXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT25Jbml0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5nYWZyQXV0aGVudGljYXRpb25Db21wb25lbnQgfSBmcm9tICcuL25nYWZyLWF1dGhlbnRpY2F0aW9uLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAZmlyZWJhc2UvYXV0aC10eXBlcyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW25nYWZyQXV0aF0nLFxyXG4gICAgZXhwb3J0QXM6ICduZ2FmckF1dGgnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ2FmckF1dGhEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsICBBZnRlclZpZXdJbml0IHtcclxuICAgIEBJbnB1dCgnbmdhZnJBdXRoJykgbmdhZnJBdXRoIDogc3RyaW5nOyBcclxuICAgIEBJbnB1dCgndXNlckxvZ091dCcpIHVzZXJMb2dPdXQgOiBzdHJpbmc7IFxyXG4gICAgQElucHV0KCdoaWRlRGVmYXVsdExvZ091dEJ1dHRvbicpIGhpZGVEZWZhdWx0TG9nT3V0QnV0dG9uIDogc3RyaW5nID0gJ2ZhbHNlJzsgXHJcbiAgICBAT3V0cHV0KCd1c2VyTG9nZ2VkSW5FdmVudCcpIHVzZXJMb2dnZWRJbkV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjx7IGlzTG9nZ2VkSW46IGJvb2xlYW4gfT4oKTtcclxuICAgIEBPdXRwdXQoJ3VzZXJFdmVudCcpIHVzZXJFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8eyB1c2VyOiBVc2VyIH0+KCk7XHJcbiAgICBwcml2YXRlIGF1dGhUZW1wbGF0ZUNvbXBvbmVudDogTmdhZnJBdXRoZW50aWNhdGlvbkNvbXBvbmVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgcHJpdmF0ZSBhdXRoOiBOZ2FmckF1dGhlbnRpY2F0aW9uU2VydmljZVxyXG4gICAgKSB7IFxyXG4gICAgICAgIHRoaXMuYXV0aC5sb2dnZWRJbi5zdWJzY3JpYmUoaXNMb2dnZWRJbiA9PiB0aGlzLnVzZXJMb2dnZWRJbkV2ZW50LmVtaXQoeyBpc0xvZ2dlZEluOiBpc0xvZ2dlZEluIH0pKTtcclxuICAgICAgICB0aGlzLmF1dGgudXNlci5zdWJzY3JpYmUodXNlciA9PiB0aGlzLnVzZXJFdmVudC5lbWl0KHsgdXNlcjogdXNlciB9KSk7XHJcblxyXG4gICAgfVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYXV0aC5oaWRlTG9nT3V0QnV0dG9uKEpTT04ucGFyc2UodGhpcy5oaWRlRGVmYXVsdExvZ091dEJ1dHRvbikpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShOZ2FmckF1dGhlbnRpY2F0aW9uQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRSZWYgPSBjb21wb25lbnRGYWN0b3J5LmNyZWF0ZSh0aGlzLnZpZXdDb250YWluZXIuaW5qZWN0b3IpO1xyXG4gICAgICAgIHRoaXMuYXV0aFRlbXBsYXRlQ29tcG9uZW50ID0gY29tcG9uZW50UmVmLmluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5hdXRoVGVtcGxhdGVDb21wb25lbnQubmdhZnJBdXRoRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nb3V0KCkge1xyXG4gICAgICAgIHRoaXMuYXV0aC5sb2dvdXQoKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiJdfQ==