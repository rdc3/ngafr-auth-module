{"version":3,"sources":["ng://ngafr-authentication/lib/ngafr-authentication.service.ts","ng://ngafr-authentication/lib/ngafr-authentication.component.ts","ng://ngafr-authentication/lib/ngafr-authentication.directive.ts","ng://ngafr-authentication/lib/ngafr-firebase-config.service.ts","ng://ngafr-authentication/lib/ngafr-authentication.module.ts"],"names":["NgafrAuthenticationService","afAuth","this","_loggedIn","loggedIn","BehaviorSubject","_user","user","hideLogOutButton$","prototype","isUserLoggedIn","_this","authState","pipe","map","fBaseUser","console","log","email","displayName","value","next","catchError","e","of","logout","signOut","hideLogOutButton","hide","loginSuccessCallback","data","loginErrorCallback","Injectable","args","providedIn","AngularFireAuth","NgafrAuthenticationComponent","ngafrAuth","cdr","subscribe","markForCheck","Component","selector","template","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","ViewChild","static","NgafrAuthDirective","componentFactoryResolver","viewContainer","auth","el","hideDefaultLogOutButton","userLoggedInEvent","EventEmitter","userEvent","isLoggedIn","emit","ngAfterViewInit","JSON","parse","ngOnInit","componentRef","resolveComponentFactory","create","injector","authTemplateComponent","instance","createEmbeddedView","ngafrAuthElement","Directive","exportAs","ComponentFactoryResolver","ViewContainerRef","ElementRef","Input","Output","FirebaseConfigService","getFirebaseUiAuthConfig","authProviders","googleAuthProvider","firebaseUiAuthConfig","signInOptions","push","firebase.auth","GoogleAuthProvider","PROVIDER_ID","facebookAuthProvider","scopes","customParameters","auth_type","provider","FacebookAuthProvider","emailAuthProvider","requireDisplayName","EmailAuthProvider","twitterAuthProvider","TwitterAuthProvider","githubAuthProvider","GithubAuthProvider","phoneAuthProvider","PhoneAuthProvider","anonymousAuthProvider","firebaseui.auth","AnonymousAuthProvider","signInFlow","credentialHelper","CredentialHelper","NONE","FirebaseConfigData","InjectionToken","NgafrAuthenticationModule","forRoot","firebaseConfig","ngModule","providers","AngularFireModule","initializeApp","provide","useValue","FirebaseUIModule","NgModule","declarations","imports","BrowserModule","FormsModule","AngularFireAuthModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { FirebaseUISignInSuccessWithAuthResult, FirebaseUISignInFailure } from 'firebaseui-angular';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { of, Observable, BehaviorSubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgafrAuthenticationService {\r\n  private _loggedIn = false;\r\n  loggedIn: BehaviorSubject<boolean> = new BehaviorSubject(this._loggedIn);\r\n  private _user: firebase.User = null;\r\n  user: BehaviorSubject<firebase.User> = new BehaviorSubject(this._user);\r\n  hideLogOutButton$: BehaviorSubject<boolean> = new BehaviorSubject(false);\r\n  constructor(\r\n    private afAuth: AngularFireAuth,\r\n  ) { }\r\n  isUserLoggedIn(): Observable<void | firebase.User> {\r\n      return this.afAuth.authState.pipe(map((fBaseUser: firebase.User) => {\r\n        console.log('User: ', (fBaseUser && fBaseUser.email) ? fBaseUser.displayName : 'Guest');\r\n        this._loggedIn = (!!fBaseUser && !!fBaseUser.email);\r\n        this._user = fBaseUser;\r\n        if (this.loggedIn.value !== this._loggedIn)\r\n          this.loggedIn.next(this._loggedIn);\r\n        this.user.next(fBaseUser);\r\n        return fBaseUser;\r\n      }),\r\n        catchError((e) => of(console.log('exception:', e))\r\n      ));\r\n  }\r\n  logout() {\r\n    this.loggedIn.next(false);\r\n    this.afAuth.signOut();\r\n  }\r\n  hideLogOutButton(hide: boolean) {\r\n    this.hideLogOutButton$.next(hide);\r\n  }\r\n\r\n  loginSuccessCallback(data: FirebaseUISignInSuccessWithAuthResult) {\r\n    // console.log('successCallback', data);\r\n    this._loggedIn = true;\r\n    // this.router.navigate(['page']);\r\n  }\r\n\r\n  loginErrorCallback(data: FirebaseUISignInFailure) {\r\n    // console.warn('errorCallback', data);\r\n    this._loggedIn = false;\r\n  }\r\n  // isUserLoggedIn(): boolean {\r\n  //   return this.loggedIn;\r\n  // }\r\n}\r\n","import { Component, ViewEncapsulation, ViewChild, TemplateRef, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';\r\nimport { NgafrAuthenticationService } from './ngafr-authentication.service';\r\n\r\n@Component({\r\n  selector: 'lib-ngafr-authentication',\r\n  template: `\r\n    <ng-template #ngafrAuthElement>\r\n      <firebase-ui (signInSuccessWithAuthResult)=\"this.ngafrAuth.loginSuccessCallback($event)\"\r\n                   (signInFailure)=\"this.ngafrAuth.loginErrorCallback($event)\"></firebase-ui>\r\n      <button *ngIf=\"loggedIn && !hideLogOutButton\" (click)=\"this.ngafrAuth.logout()\">Logout1</button>\r\n    </ng-template>\r\n  `,\r\n  styleUrls: [\r\n    './ngafr-authentication.component.css',\r\n    '../../../../node_modules/firebaseui/dist/firebaseui.css'\r\n  ],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class NgafrAuthenticationComponent {\r\n  @ViewChild('ngafrAuthElement', { static: true }) ngafrAuthElement: TemplateRef<any>;\r\n  public loggedIn = false;\r\n  public hideLogOutButton = false;\r\n  constructor(\r\n    public ngafrAuth: NgafrAuthenticationService,\r\n    private cdr: ChangeDetectorRef) {\r\n    this.ngafrAuth.isUserLoggedIn().subscribe(user => {\r\n      if (user) {\r\n        this.loggedIn = true;\r\n      } else {\r\n        this.loggedIn = false;\r\n      }\r\n    });\r\n    this.ngafrAuth.hideLogOutButton$.subscribe(hide => {\r\n      this.hideLogOutButton = hide\r\n      this.cdr.markForCheck();\r\n    });\r\n    \r\n  }\r\n}\r\n","import { NgafrAuthenticationService } from './ngafr-authentication.service';\r\nimport { Directive, OnInit, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef, EventEmitter, Output, Input, ElementRef, HostListener, AfterViewInit } from '@angular/core';\r\nimport { NgafrAuthenticationComponent } from './ngafr-authentication.component';\r\nimport { of } from 'rxjs';\r\n\r\n\r\n@Directive({\r\n    selector: '[ngafrAuth]',\r\n    exportAs: 'ngafrAuth'\r\n})\r\nexport class NgafrAuthDirective implements OnInit,  AfterViewInit {\r\n    @Input('ngafrAuth') ngafrAuth : string; \r\n    @Input('userLogOut') userLogOut : string; \r\n    @Input('hideDefaultLogOutButton') hideDefaultLogOutButton : string = 'false'; \r\n    @Output('userLoggedInEvent') userLoggedInEvent = new EventEmitter<{ isLoggedIn: boolean }>();\r\n    @Output('userEvent') userEvent = new EventEmitter<{ user: firebase.User }>();\r\n    private authTemplateComponent: NgafrAuthenticationComponent;\r\n\r\n    constructor(\r\n        private componentFactoryResolver: ComponentFactoryResolver,\r\n        private viewContainer: ViewContainerRef,\r\n        private cdr: ChangeDetectorRef,\r\n        private auth: NgafrAuthenticationService,\r\n        private el: ElementRef\r\n    ) { \r\n        this.auth.loggedIn.subscribe(isLoggedIn => this.userLoggedInEvent.emit({ isLoggedIn: isLoggedIn }));\r\n        this.auth.user.subscribe(user => this.userEvent.emit({ user: user }));\r\n\r\n    }\r\n    ngAfterViewInit(): void {\r\n        this.auth.hideLogOutButton(JSON.parse(this.hideDefaultLogOutButton));\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(NgafrAuthenticationComponent);\r\n        const componentRef = componentFactory.create(this.viewContainer.injector);\r\n        this.authTemplateComponent = componentRef.instance;\r\n        this.viewContainer.createEmbeddedView(this.authTemplateComponent.ngafrAuthElement);\r\n        this.cdr.markForCheck();\r\n    }\r\n\r\n    logout() {\r\n        this.auth.logout();\r\n    }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { IFirebaseAuthProviders } from './ngafr-firebase-config.model';\r\nimport * as firebase from 'firebase';\r\nimport * as firebaseui from 'firebaseui';\r\n\r\n@Injectable()\r\nexport class FirebaseConfigService {\r\n\r\n  static firebaseUiAuthConfig: firebaseui.auth.Config = {\r\n    signInFlow: 'popup',\r\n    signInOptions: [],\r\n    // tosUrl: '<your-tos-link>',\r\n    // privacyPolicyUrl: '<your-privacyPolicyUrl-link>',\r\n    credentialHelper: firebaseui.auth.CredentialHelper.NONE\r\n  };\r\n\r\n  static getFirebaseUiAuthConfig(authProviders: IFirebaseAuthProviders) {\r\n    if (authProviders.googleAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push(firebase.auth.GoogleAuthProvider.PROVIDER_ID);\r\n    }\r\n    if (authProviders.facebookAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push({\r\n          scopes: [\r\n            'public_profile',\r\n            'email',\r\n            'user_likes',\r\n            'user_friends'\r\n          ],\r\n          customParameters: {\r\n            auth_type: 'reauthenticate'\r\n          },\r\n          provider: firebase.auth.FacebookAuthProvider.PROVIDER_ID\r\n        });\r\n     }\r\n    if (authProviders.emailAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push({\r\n        requireDisplayName: true,\r\n        provider: firebase.auth.EmailAuthProvider.PROVIDER_ID\r\n      });\r\n    }\r\n    if (authProviders.twitterAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push(firebase.auth.TwitterAuthProvider.PROVIDER_ID);\r\n     }\r\n    if (authProviders.githubAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push(firebase.auth.GithubAuthProvider.PROVIDER_ID);\r\n     }\r\n    if (authProviders.phoneAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push(firebase.auth.PhoneAuthProvider.PROVIDER_ID);\r\n     }\r\n    if (authProviders.anonymousAuthProvider) {\r\n      FirebaseConfigService.firebaseUiAuthConfig.signInOptions.push(firebaseui.auth.AnonymousAuthProvider.PROVIDER_ID);\r\n     }\r\n    return FirebaseConfigService.firebaseUiAuthConfig;\r\n  }\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule, InjectionToken, ModuleWithProviders } from '@angular/core';\r\nimport { FirebaseUIModule } from 'firebaseui-angular';\r\nimport { AngularFireModule } from '@angular/fire';\r\nimport { AngularFireAuthModule } from '@angular/fire/auth';\r\nimport { IFirebaseConf, IFirebaseAuthProviders } from './ngafr-firebase-config.model';\r\nimport { FirebaseConfigService } from './ngafr-firebase-config.service';\r\nimport { NgafrAuthDirective } from './ngafr-authentication.directive';\r\nimport { NgafrAuthenticationComponent } from './ngafr-authentication.component';\r\n\r\nexport const FirebaseConfigData = new InjectionToken<IFirebaseConf>('FIREBASECONF');\r\n\r\n\r\n@NgModule({\r\n  declarations: [NgafrAuthDirective, NgafrAuthenticationComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    AngularFireAuthModule,\r\n    FirebaseUIModule\r\n  ],\r\n  exports: [NgafrAuthDirective, NgafrAuthenticationComponent],\r\n  providers: [FirebaseConfigService],\r\n  entryComponents: [NgafrAuthenticationComponent]\r\n})\r\n\r\nexport class NgafrAuthenticationModule {\r\n  public static forRoot(firebaseConfig: IFirebaseConf, authProviders: IFirebaseAuthProviders): ModuleWithProviders {\r\n    const firebaseUiAuthConfig = FirebaseConfigService.getFirebaseUiAuthConfig(authProviders);\r\n    return {\r\n      ngModule: NgafrAuthenticationModule,\r\n      providers: [\r\n        FirebaseConfigService,\r\n        AngularFireModule.initializeApp(firebaseConfig).providers,\r\n        {provide: FirebaseConfigData, useValue: firebaseConfig},\r\n        FirebaseUIModule.forRoot(firebaseUiAuthConfig).providers\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\n\r\n"]}